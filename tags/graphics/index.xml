<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Graphics on Dumitru Rareș | Graphics Programmer</title><link>https://dumitrurares14.github.io/tags/graphics/</link><description>Recent content in Graphics on Dumitru Rareș | Graphics Programmer</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 08 Jun 2020 08:06:25 +0600</lastBuildDate><atom:link href="https://dumitrurares14.github.io/tags/graphics/index.xml" rel="self" type="application/rss+xml"/><item><title>2D CPU Ray Tracer</title><link>https://dumitrurares14.github.io/posts/2d_ray_tracer/</link><pubDate>Mon, 08 Jun 2020 08:06:25 +0600</pubDate><guid>https://dumitrurares14.github.io/posts/2d_ray_tracer/</guid><description>&lt;p>This 2D Ray Tracer was developed as a course project at BUAS during Block C of Year 1. The entire rendering pipeline runs on the CPU in C++. To demonstrate the dynamic lighting capabilities, I made a small snake spinoff on top of the engine.&lt;/p>
&lt;h2 id="goals-and-motivations">Goals and Motivations&lt;/h2>
&lt;h4 id="technical-goals">Technical Goals:&lt;/h4>
&lt;ul>
&lt;li>Explore fundamental ray-tracing concepts such as intersection checks, shadows, lighting.&lt;/li>
&lt;li>Gain experience on CPU based renderers while improving C++ skills.&lt;/li>
&lt;li>Get a basic understanding of optimization techniques in ray tracing&lt;/li>
&lt;/ul>
&lt;h4 id="challenges-and-solutions">Challenges and solutions&lt;/h4></description></item><item><title>Cone tracing cellular automata GI</title><link>https://dumitrurares14.github.io/posts/cone_tracing_ca/</link><pubDate>Mon, 08 Jun 2020 08:06:25 +0600</pubDate><guid>https://dumitrurares14.github.io/posts/cone_tracing_ca/</guid><description>&lt;p>Stretch goal explored by me during the OpenGL voxel team project. I presented the explored technique at GPC 2024 with a small talk. Cellular automata is used for direct light propagation and cone tracing for indirect calculation and direct sampling. Volumetric and specular reflections are done also with cone tracing.&lt;/p>
&lt;h2 id="goals-and-motivations">Goals and Motivations&lt;/h2></description></item><item><title>rVox</title><link>https://dumitrurares14.github.io/posts/rvox/</link><pubDate>Mon, 08 Jun 2020 08:06:25 +0600</pubDate><guid>https://dumitrurares14.github.io/posts/rvox/</guid><description>&lt;p>Custom voxel engine project made during Block B in Year 2 at BUAS. The engine is made in C++ and OpenGL with OpenCL for the rendering/compute pipeline. Lighting is being calculated per voxel using software ray tracing inside a OpenCL kernel.&lt;/p></description></item><item><title>Voxel team project</title><link>https://dumitrurares14.github.io/posts/voxel_team_engine/</link><pubDate>Mon, 08 Jun 2020 08:06:25 +0600</pubDate><guid>https://dumitrurares14.github.io/posts/voxel_team_engine/</guid><description>&lt;p>Custom voxel engine project made in a team during Block C in Year 2 at BUAS. The engine is made in C++ and OpenGL with additional cross-platform support for PlayStation 5.&lt;/p></description></item><item><title>Wexel engine</title><link>https://dumitrurares14.github.io/posts/wexel/</link><pubDate>Mon, 08 Jun 2020 08:06:25 +0600</pubDate><guid>https://dumitrurares14.github.io/posts/wexel/</guid><description>&lt;p>Custom voxel engine made as a self study project with a friend in 32 hours of tracked work. Made in WebGPU and javascript+HTML, rendering a chunk of 128x128x128 voxels inside a rasterized box, fully ray traced shadows and rendering with basic PBR support.&lt;/p></description></item></channel></rss>